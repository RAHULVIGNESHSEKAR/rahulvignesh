//Source of base code for RFID scanning: https://github.com/pkourany/MFRC522_RFID_Library
 
//Date: Feb 10, 2020 by Rahul vignesh Sekar 

//The below header file should be included from the particle library.
//This is mandatory while working with RC522 RFID reader  
//#include <MFRC522.h> 

//SS pin acts as Signal input when SPI interface is enabled, 
//acts as serial data when I2C interface is enabled and acts as serial data input when UART interface is enabled.   
#define SS_PIN SS 

//is an input for Reset and power-down. When this pin goes low, hard power-down is enabled. 
//This turns off all internal current sinks including the oscillator and the input pins are disconnected from the outside world.
//On the rising edge, the module is reset.
#define RST_PIN D2

int Greenblink = D3; //Initialize Green LED to D3 for 'Cup Ok' feeback while buying 
int NOTGreenblink = D6; //Initialize Red LED to D6 for 'Cup NOT ok' feeback   
int Notifyblink = D5; //Initialize Yellow LED to D5 for 'Notifying Customer' for feeback
String Notify = "Cup tagged with the user";

MFRC522 mfrc522(SS_PIN, RST_PIN);	// Create MFRC522 instance.


void setup() {
	Serial.begin(9600);	// Initialize serial communications with the PC
	mfrc522.setSPIConfig(); // sets up SPI config
	pinMode(Greenblink, OUTPUT); // Set up the Green LED for 'Cup Ok' feedback  
	pinMode(NOTGreenblink, OUTPUT); // Set up the RED LED for 'Cup NOT Ok' feedback
	pinMode(Notifyblink, OUTPUT); // Set up the Yellow LED for 'Customer Ok' feedback

	mfrc522.PCD_Init();	// Initialize RC522 card
	Serial.println("Start Scanning");
}


void loop() {
	// Look for new cards
	if ( ! mfrc522.PICC_IsNewCardPresent()) {
		return;
	}
	Serial.println("New card Detected");
	// Read tapped card data
	if ( ! mfrc522.PICC_ReadCardSerial()) {
		return;
	}

	//Dump all card data to Serial
	mfrc522.PICC_DumpToSerial(&(mfrc522.uid));

	unsigned long UID_unsigned;
    UID_unsigned =  mfrc522.uid.uidByte[0] << 24;
    UID_unsigned += mfrc522.uid.uidByte[1] << 16;
    UID_unsigned += mfrc522.uid.uidByte[2] <<  8;
    UID_unsigned += mfrc522.uid.uidByte[3];

    Serial.println();
    Serial.println("UID Unsigned int");
    Serial.println(UID_unsigned);

    String UID =  (String)UID_unsigned;
    long UID_LONG=(long)UID_unsigned;

    Serial.println("UID Long :");
    Serial.println(UID_LONG);

    Serial.println("UID String :");
    Serial.println(UID);

	String event = "iotecosystems.2018.techdemo.rfid";
	//Particle.publish( "iotecosystems.2018.techdemo.rfid", UID_string ); 
	//This cupdatabase function recognizes only the Green cups
	//First scan for registered customers. Notify with yellow LED if they are registered customer  
	SignalCustomer(); 
	//Next, scan for Green cups. Notify with Green LED if the cups are registered   
	Cupdatabase();
	//Notify with RED LED if the cups are not registered. 
	CupNotOk();

	delay( 1000 );
}

void SignalCustomer()
{
    unsigned long UID_unsigned;
    UID_unsigned =  mfrc522.uid.uidByte[0] << 24;
    UID_unsigned += mfrc522.uid.uidByte[1] << 16;
    UID_unsigned += mfrc522.uid.uidByte[2] <<  8;
    UID_unsigned += mfrc522.uid.uidByte[3]; 


    String UID =  (String)UID_unsigned;
    long UID_LONG=(long)UID_unsigned;
    
    Serial.println("UID String :");
    Serial.println(UID);

    if(UID == "3652313131")
	{
	//LED blink to indicate that the customer has an active subscription with the coffee shop    
    digitalWrite(Notifyblink, HIGH);
    //This circuit takes 2 seconds to complete 
    delay(2000);
    Particle.publish( "UID", UID);
    digitalWrite(Notifyblink, LOW); 
	}
	else if(UID == "392937030")  
	{
	//LED blink to indicate that the customer has an active subscription with the coffee shop   
    digitalWrite(Notifyblink, HIGH);
    //This circuit takes 2 seconds to complete 
    delay(2000);
    Particle.publish( "UID", UID);
    digitalWrite(Notifyblink, LOW); 
	}
}


void Cupdatabase()
{ 
    unsigned long UID_unsigned;
    UID_unsigned =  mfrc522.uid.uidByte[0] << 24;
    UID_unsigned += mfrc522.uid.uidByte[1] << 16;
    UID_unsigned += mfrc522.uid.uidByte[2] <<  8;
    UID_unsigned += mfrc522.uid.uidByte[3]; 

   // Serial.println();
   // Serial.println("UID Unsigned int");
   // Serial.println(UID_unsigned);
    
    String UID =  (String)UID_unsigned;
    long UID_LONG=(long)UID_unsigned;
    
    //Serial.println("UID Long :");
    //Serial.println(UID_LONG);
    
    Serial.println("UID String :");
    Serial.println(UID);

    if(UID == "2934069177")
	{
	//LED blink to indicate that the cup is scanned before buying   
    digitalWrite(Greenblink, HIGH);
    //This circuit takes 2 seconds to complete 
    delay(2000);
    Particle.publish( "UID", UID); 
    digitalWrite(Greenblink, LOW); 
	}
	else if(UID == "3471464377")  
	{
	//LED blink to indicate that the cup is scanned before buying   
    digitalWrite(Greenblink, HIGH);
    //This circuit takes 2 seconds to complete 
    delay(2000);
    Particle.publish( "UID", UID);
    digitalWrite(Greenblink, LOW); 
	}
	else if(UID == "2935117753")  
	{
	//LED blink to indicate that the cup is scanned before buying   
    digitalWrite(Greenblink, HIGH);
    //This circuit takes 2 seconds to complete 
    delay(2000);
    Particle.publish( "UID", UID);
    digitalWrite(Greenblink, LOW); 
	}
	else if(UID == "3203028921")  
	{
	//LED blink to indicate that the cup is scanned before buying   
    digitalWrite(Greenblink, HIGH);
    //This circuit takes 2 seconds to complete 
    delay(2000);
    Particle.publish( "UID", UID);
    digitalWrite(Greenblink, LOW); 
	}
	else if(UID == "2398377913")  
	{
	//LED blink to indicate that the cup is scanned before buying   
    digitalWrite(Greenblink, HIGH);
    //This circuit takes 2 seconds to complete 
    delay(2000);
    Particle.publish( "UID", UID);
    digitalWrite(Greenblink, LOW); 
	}
	else if(UID == "2666420153")  
	{
	//LED blink to indicate that the cup is scanned before buying   
    digitalWrite(Greenblink, HIGH);
    //This circuit takes 2 seconds to complete 
    delay(2000);
    Particle.publish( "UID", UID);
    digitalWrite(Greenblink, LOW); 
	}
	else if(UID == "2130073529")  
	{
	//LED blink to indicate that the cup is scanned before buying   
    digitalWrite(Greenblink, HIGH);
    //This circuit takes 2 seconds to complete 
    delay(2000);
    Particle.publish( "UID", UID);
    digitalWrite(Greenblink, LOW); 
	}
}

void CupNotOk()
{  
  unsigned long UID_unsigned;
   UID_unsigned =  mfrc522.uid.uidByte[0] << 24;
   UID_unsigned += mfrc522.uid.uidByte[1] << 16;
   UID_unsigned += mfrc522.uid.uidByte[2] <<  8;
   UID_unsigned += mfrc522.uid.uidByte[3]; 


   String UID =  (String)UID_unsigned;
   long UID_LONG=(long)UID_unsigned;
    
   Serial.println("UID String :");
   Serial.println(UID);
 
   if(UID == "2934069177")
   {
   millis();   //calling millis function as a dummy here
   }
   else if(UID == "2935117753")
   {
   millis();   
   }
   else if(UID == "3471464377")
   {
   millis();   
   }
   else if(UID == "3652313131")
   {
   millis();   
   }
   else if(UID == "392937030")
   {
   millis();   
   }
   else if(UID == "3203028921")
   {
   millis();   
   }
   else if(UID == "2398377913")
   {
   millis();   
   }
   else if(UID == "2666420153")
   {
   millis();   
   }
   else if(UID == "2130073529")
   {
   millis();   
   }
   else
   {
   digitalWrite(NOTGreenblink, HIGH); //The Red LED blinks now 
   //This circuit takes 2 seconds to complete 
   delay(2000);
   digitalWrite(NOTGreenblink, LOW);
   }
}

